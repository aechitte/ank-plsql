
PACKAGES-------------------------

============================================
1) execute package specification then
2) execute package body

================================

1)

create or replace package  emp_pack as
procedure getEmpInfo(p_empno emp.empno%type);					package specification------first execute this
function getSal(p_empno emp.empno%type) return number;
end;
/


create or replace package body emp_pack as					package body----------------then execute this

procedure getEmpInfo(p_empno emp.empno%type) as				1)procedure
v_ename emp.ename%type;

begin
select ename into v_ename from emp where empno=p_empno;
dbms_output.put_line('from getEmpInfo proc ename=' ||v_ename);

exception
when no_data_found then
dbms_output.put_line('invalid empno');
end;									end

function getSal(p_empno emp.empno%type) return number as				2)function
v_sal emp.sal%type;
begin
select sal into v_sal from emp where empno=p_empno;
dbms_output.put_line('from getSal function sal=' ||v_sal);
return v_sal;

exception
when no_data_found then
dbms_output.put_line('invalid empno');
end;									end


end;									package body end
/


----------------------------------------------------------
execute emp_pack.getEmpInfo(7788);
o/p:
from getEmpInfo proc ename=SCOTT

------------------------------------------------------------
declare
v_forsal emp.sal%type;
begin
v_forsal:=emp_pack.getSal(7788);
dbms_output.put_line('sal from caller is =' ||v_forsal);
end;
/

o/p:
from getSal function sal=9636
sal from caller is =9636
---------------------------------------------------------------

=====================================================================================


to call the another procedure without declaring into the package specification......we are calling in package body


ex.

create or replace package  emp_pack as
procedure getEmpInfo(p_empno emp.empno%type);					
function getSal(p_empno emp.empno%type) return number;
end;
/


create or replace package body emp_pack as

procedure pri_proc as						
begin
dbms_output.put_line('in private proc pri_proc');
end;					

procedure getEmpInfo(p_empno emp.empno%type) as				
v_ename emp.ename%type;

begin

pri_proc;                                             -----------------------calling pri_proc procedure

select ename into v_ename from emp where empno=p_empno;
dbms_output.put_line('from getEmpInfo proc ename=' ||v_ename);

exception
when no_data_found then
dbms_output.put_line('invalid empno');
end;									
function getSal(p_empno emp.empno%type) return number as				
v_sal emp.sal%type;
begin
select sal into v_sal from emp where empno=p_empno;
dbms_output.put_line('from getSal function sal=' ||v_sal);
return v_sal;

exception
when no_data_found then
dbms_output.put_line('invalid empno');
end;									


end;									
/


execute emp_pack.priv_proc;
o/p:
 component 'PRIV_PROC' must be declared.........error..bcz we have not declare it in the specification


execute emp_pack.getEmpInfo(7788);
o/p:
in private proc pri_proc
from getEmpInfo proc ename=SCOTT
======================================================================================================

global variable declaration and local variable declaration 


ex.

create or replace package  emp_pack as
g_var number:=100;
procedure getEmpInfo(p_empno emp.empno%type);					
function getSal(p_empno emp.empno%type) return number;
end;
/


create or replace package body emp_pack as
priv_var number:=11;
procedure pri_proc as						
begin
dbms_output.put_line('in private proc pri_proc');
end;					

procedure getEmpInfo(p_empno emp.empno%type) as				
v_ename emp.ename%type;

begin

pri_proc;                                          

select ename into v_ename from emp where empno=p_empno;
dbms_output.put_line('from getEmpInfo proc ename=' ||v_ename);

exception
when no_data_found then
dbms_output.put_line('invalid empno');
end;
									
function getSal(p_empno emp.empno%type) return number as				
v_sal emp.sal%type;
begin
select sal into v_sal from emp where empno=p_empno;
dbms_output.put_line('from getSal function sal=' ||v_sal);
return v_sal;

exception
when no_data_found then
dbms_output.put_line('invalid empno');
end;									


end;									
/


-------global variable execution
begin
dbms_output.put_line('global_var=' || emp_pack.g_var);
end;
o/p:  global_var=100

-------local variable execution....it will give error

begin
dbms_output.put_line('priv_var=' || emp_pack.g_var);
end;


==============================================================================================


-----------initialization block

ex.

create or replace package  emp_pack as
g_var number;
procedure getEmpInfo(p_empno emp.empno%type);					
function getSal(p_empno emp.empno%type) return number;
end;
/


create or replace package body emp_pack as
priv_var number:=11;
procedure pri_proc as
						
begin
dbms_output.put_line('in private proc pri_proc');
end;					

procedure getEmpInfo(p_empno emp.empno%type) as				
v_ename emp.ename%type;

begin

pri_proc;                                          

select ename into v_ename from emp where empno=p_empno;
dbms_output.put_line('from getEmpInfo proc ename=' ||v_ename);

exception
when no_data_found then
dbms_output.put_line('invalid empno');
end;									

function getSal(p_empno emp.empno%type) return number as				
v_sal emp.sal%type;

begin
select sal into v_sal from emp where empno=p_empno;
dbms_output.put_line('from getSal function sal=' ||v_sal);
return v_sal;

exception
when no_data_found then
dbms_output.put_line('invalid empno');
end;

begin
dbms_output.put_line('initialization');
g_var:=1;
end;
														
/



begin
dbms_output.put_line('priv_var=' || emp_pack.g_var);
end;
o/p:
initialization
priv_var=1

================================================================================

PACKAGE OVERLOADING---------------------------------

function name is same but parameters will be different


ex.


create or replace package operation as

function add( var1 number, var2 number) return number;

function add( var1 number, var2 number, var3 number) return number;

end;
/


create or replace package body operation as

function add(var1 number,var2 number) return number as
result number;
begin
result:=var1+var2;
dbms_output.put_line('add with 2 para result=' ||result);
return result;
end;

function add(var1 number,var2 number,var3 number) return number as
result number;
begin
result:=var1+var2+var3;
dbms_output.put_line('add with 23para result=' ||result);
return result;
end;

end;
/


declare
res number;
begin
res:=operation.add(10,20);
dbms_output.put_line('res='||res);

res:=operation.add(100,200,300);
dbms_output.put_line('res='||res);
end;
/

o/p:
add with 2 para result=30
res=30
add with 23para result=600
res=600

============================================================


